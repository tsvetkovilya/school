# Generated by Django 4.1.7 on 2023-05-18 16:59

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('wishes', models.CharField(max_length=255, verbose_name='Пожелания к обучению')),
                ('phone_number', models.CharField(max_length=255, verbose_name='Номер телефона')),
                ('grade', models.CharField(choices=[('9 класс', '9 класс'), ('11 класс', '11 класс'), ('Другое', 'Другое')], max_length=20, verbose_name='Класс')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_users', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_users_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название предмета')),
                ('description', models.TextField(verbose_name='Описание предмета')),
                ('course_program', models.FileField(upload_to='course_programs/', verbose_name='Ссылка на программу курса')),
            ],
            options={
                'verbose_name_plural': 'Курсы',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surname', models.CharField(max_length=255, verbose_name='Фамилия')),
                ('name', models.CharField(max_length=255, verbose_name='Имя')),
                ('patronymic', models.CharField(max_length=255, verbose_name='Отчество')),
                ('post', models.CharField(max_length=255, verbose_name='Должность')),
                ('academic_degree', models.CharField(max_length=255, verbose_name='Академическая степень')),
                ('photo', models.CharField(max_length=255, verbose_name='Ссылка на фото')),
                ('additionally', models.CharField(max_length=255, verbose_name='Информация о преподавателе')),
                ('teacher_lesson', models.CharField(choices=[('1', 'Математика'), ('2', 'Физика'), ('3', 'Информатика и ИКТ')], max_length=1, verbose_name='Ведет предмет')),
            ],
            options={
                'verbose_name_plural': 'Учителя',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес школы')),
                ('site', models.CharField(max_length=255, verbose_name='Сайт учебного заведения')),
                ('vk', models.CharField(max_length=255, verbose_name='Ссылка на ВК')),
                ('youtube', models.CharField(max_length=255, verbose_name='Ссылка на YouTube')),
                ('telegram', models.CharField(max_length=255, verbose_name='Ссылка на Telegram')),
                ('email', models.CharField(max_length=255, verbose_name='Email')),
                ('phone_number', models.CharField(max_length=255, verbose_name='Номер телефона школы')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Добавил пользователь')),
            ],
            options={
                'verbose_name_plural': 'Школа',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(verbose_name='Начало урока')),
                ('end_time', models.TimeField(verbose_name='Конец урока')),
                ('day_of_week', models.DateField(verbose_name='Дата')),
                ('lesson_topic', models.CharField(max_length=200, verbose_name='Тема занятия')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.course', verbose_name='Курс')),
                ('students', models.ManyToManyField(limit_choices_to={'is_staff': False}, to=settings.AUTH_USER_MODEL, verbose_name='Пойдут на занятие')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.teacher', verbose_name='Учитель')),
            ],
            options={
                'verbose_name_plural': 'Расписание занятий',
            },
        ),
        migrations.CreateModel(
            name='CourseRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('additional_information', models.CharField(max_length=1000, verbose_name='Дополнительная информация для студента')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.course', verbose_name='Курс')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
            ],
            options={
                'verbose_name_plural': 'Регистрация на курс и доп.информация по курсу',
            },
        ),
        migrations.CreateModel(
            name='Attendance_of_classes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.lesson', verbose_name='Курс')),
                ('students', models.ManyToManyField(limit_choices_to={'is_staff': False}, to=settings.AUTH_USER_MODEL, verbose_name='Посетили')),
            ],
            options={
                'verbose_name_plural': 'Посещения занятий',
            },
        ),
    ]
